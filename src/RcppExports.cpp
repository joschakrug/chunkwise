// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// read_chunkwise
void read_chunkwise(const std::string& filepath, Function handler, size_t chunk_size, bool repeat_header, size_t header_rows, size_t skip, Nullable<int> max_rows);
RcppExport SEXP _chunkwise_read_chunkwise(SEXP filepathSEXP, SEXP handlerSEXP, SEXP chunk_sizeSEXP, SEXP repeat_headerSEXP, SEXP header_rowsSEXP, SEXP skipSEXP, SEXP max_rowsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filepath(filepathSEXP);
    Rcpp::traits::input_parameter< Function >::type handler(handlerSEXP);
    Rcpp::traits::input_parameter< size_t >::type chunk_size(chunk_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type repeat_header(repeat_headerSEXP);
    Rcpp::traits::input_parameter< size_t >::type header_rows(header_rowsSEXP);
    Rcpp::traits::input_parameter< size_t >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type max_rows(max_rowsSEXP);
    read_chunkwise(filepath, handler, chunk_size, repeat_header, header_rows, skip, max_rows);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_chunkwise_read_chunkwise", (DL_FUNC) &_chunkwise_read_chunkwise, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_chunkwise(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
